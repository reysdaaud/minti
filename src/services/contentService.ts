// src/services/contentService.ts
import {
  collection,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  query,
  orderBy,
  type DocumentData,
  type FirestoreError,
  Timestamp,
} from 'firebase/firestore';
import { db } from '@/lib/firebase';

export interface ContentItem {
  id: string;
  title: string;
  subtitle?: string; // Or artist for audio, or a brief subtitle for articles
  imageUrl: string; // Used for album art (audio) or featured image (article)
  dataAiHint: string;
  category?: 'Music' | 'Podcast' | 'News' | 'Tech' | 'Lifestyle' | string; // Expanded categories
  createdAt?: Timestamp;
  updatedAt?: Timestamp;

  // New fields for content type differentiation
  contentType: 'audio' | 'article';
  audioSrc?: string; // Optional: only for audio content
  excerpt?: string; // Optional: only for article content
  fullBodyContent?: string; // Optional: only for article content
}

export interface ContentItemData extends Omit<ContentItem, 'id' | 'createdAt' | 'updatedAt'> {
  // For creation, id is generated by Firestore
}


const CONTENT_COLLECTION = 'content';

// Fetch all content items
export const getContentItems = async (): Promise<ContentItem[]> => {
  try {
    const contentCollectionRef = collection(db, CONTENT_COLLECTION);
    const q = query(contentCollectionRef, orderBy('createdAt', 'desc'));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    } as ContentItem));
  } catch (error) {
    console.error('Error fetching content items:', error);
    throw error; // Re-throw to be handled by the caller
  }
};

// Add a new content item
export const addContentItem = async (itemData: ContentItemData): Promise<string> => {
  try {
    const docRef = await addDoc(collection(db, CONTENT_COLLECTION), {
      ...itemData,
      createdAt: Timestamp.now(),
      updatedAt: Timestamp.now(),
    });
    return docRef.id;
  } catch (error) {
    console.error('Error adding content item:', error);
    throw error;
  }
};

// Update an existing content item
export const updateContentItem = async (itemId: string, itemData: Partial<ContentItemData>): Promise<void> => {
  try {
    const itemDocRef = doc(db, CONTENT_COLLECTION, itemId);
    await updateDoc(itemDocRef, {
        ...itemData,
        updatedAt: Timestamp.now(),
    });
  } catch (error) {
    console.error('Error updating content item:', error);
    throw error;
  }
};

// Delete a content item
export const deleteContentItem = async (itemId: string): Promise<void> => {
  try {
    const itemDocRef = doc(db, CONTENT_COLLECTION, itemId);
    await deleteDoc(itemDocRef);
  } catch (error) {
    console.error('Error deleting content item:', error);
    throw error;
  }
};
